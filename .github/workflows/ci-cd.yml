name: CI/CD Pipeline

on:
  push:
    branches: 
      - main
      - develop
    tags:
      - 'v*.*.*'
    paths:
      - 'doc2mark/**'
  pull_request:
    types:
      - opened
    branches:
      - 'feature/**'
    paths:
      - 'doc2mark/**'

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pre-commit
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py', '**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit black isort flake8 mypy pylint
    
    - name: Run pre-commit
      run: |
        pre-commit run --all-files || true
    
    - name: Check code formatting
      run: |
        black --check unifydoc tests || true
        isort --check-only unifydoc tests || true
    
    - name: Lint code
      run: |
        flake8 unifydoc tests --max-line-length=120 || true
        pylint unifydoc --exit-zero

  test:
    name: Test - Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: quality
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-eng
        sudo apt-get install -y poppler-utils
    
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install tesseract || true
        brew install poppler || true
    
    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install tesseract --no-progress || true
        choco install poppler --no-progress || true
    
    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e .[all]
        pip install pytest pytest-cov pytest-xdist
    
    - name: Run unit tests
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        python -m pytest tests -v -m "not integration" --cov=unifydoc --cov-report=xml --cov-report=html
    
    - name: Run integration tests (if API key available)
      if: matrix.python-version == '3.10' && matrix.os == 'ubuntu-latest' && github.event_name != 'pull_request'
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        if [ -n "$OPENAI_API_KEY" ]; then
          python -m pytest tests -v -m integration --cov=unifydoc --cov-append --cov-report=xml
        else
          echo "Skipping integration tests - no API key available"
        fi
      continue-on-error: true
    
    - name: Upload coverage
      if: matrix.python-version == '3.10' && matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.xml
          htmlcov/